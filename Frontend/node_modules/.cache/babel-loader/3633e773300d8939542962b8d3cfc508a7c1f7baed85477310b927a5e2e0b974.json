{"ast":null,"code":"var _jsxFileName = \"/Users/yushanlu/Desktop/Othello/othello-test/src/Canvas-test.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OthelloBoard = props => {\n  _s();\n  const {\n    started,\n    onDataChange,\n    whiteCount,\n    blackCount\n  } = props;\n  const canvasRef = useRef(null);\n  const [board, setBoard] = useState([]);\n  //const [started, setStarted] = useState(1); // started is the variable, 0 is what it's initialized w/\n  const [turn, setTurn] = useState(\"W\");\n  const [b, setB] = useState(2);\n  const gridsize = 75;\n  var white = whiteCount;\n  var black = blackCount;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Draw a red rectangle\n    var cw = canvas.width;\n    var ch = canvas.height;\n    var fps = 10;\n    var paused = 0; // 1: paused; 0: not paused\n    console.log(started);\n    function init() {\n      paused = 0;\n      for (let i = 0; i < 8; i++) {\n        board[i] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n      }\n      board[3][3] = \"W\";\n      board[4][3] = \"B\";\n      board[4][4] = \"W\";\n      board[3][4] = \"B\";\n\n      // Start menu code (likely to change over time!)\n    }\n\n    init();\n    setInterval(draw, 1000 / fps);\n\n    /* **************** */\n    /*      DRAW        */\n    /* **************** */\n\n    // This runs every frame and handles all rendering drawing operations.\n    function draw() {\n      // Without this, previous frames remain on the screen\n      ctx.clearRect(0, 0, cw, ch);\n\n      // Background\n      ctx.fillStyle = \"green\";\n      ctx.fillRect(0, 0, cw, ch);\n      ctx.fillStyle = \"black\";\n\n      // Draw the lines\n      for (var d1 = 0; d1 < 602; d1 += gridsize) {\n        ctx.fillRect(d1, 0, b, ch);\n        ctx.fillRect(0, d1, cw, b);\n      }\n\n      // Draw the 4 weird little circles around the middle 4 squares:\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.arc(452 - b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.arc(452 - b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      // Change the content of the piece-counters\n      //numWhiteElement.textContent = \"white:  \" + whiteCount;\n      //numBlackElement.textContent = \"black:  \" + blackCount;\n      // Draw the pieces\n      drawPieces(ctx);\n      if (started) {\n        ctx.fillStyle = \"#fffa\";\n        ctx.fillRect(0, 0, cw, ch);\n        ctx.font = \"30px arial\";\n        ctx.fillStyle = \"#000\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\"Click the Connect button to start the game.\", cw / 2, 100);\n      }\n    }\n  }, [started]);\n  const drawPieces = ctx => {\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        if (board[x][y] == \"W\") {\n          ctx.beginPath();\n          ctx.arc(\n          // define the circle\n          x * gridsize + gridsize / 2, y * gridsize + gridsize / 2, gridsize / 2 - 4 * b,\n          // radius\n          0,\n          // startAngle\n          2 * Math.PI // endAngle\n          );\n\n          ctx.fillStyle = \"white\";\n          ctx.fill();\n          ctx.closePath();\n        } else if (board[x][y] == \"B\") {\n          ctx.beginPath();\n          ctx.arc(x * gridsize + gridsize / 2, y * gridsize + gridsize / 2, gridsize / 2 - 4 * b, 0, 2 * Math.PI);\n          ctx.fillStyle = \"black\";\n          ctx.fill();\n          ctx.closePath();\n        }\n      }\n    }\n  };\n  const handleCanvasClick = event => {\n    const canvas = canvasRef.current;\n    const boundingRect = canvas.getBoundingClientRect();\n    const x = event.clientX - boundingRect.left;\n    const y = event.clientY - boundingRect.top;\n    if (started === 0) return;\n    const targetX = Math.floor(x / gridsize);\n    const targetY = Math.floor(y / gridsize);\n    if (board[targetX][targetY] !== \"\") return;\n    const newBoard = [...board];\n    newBoard[targetX][targetY] = turn;\n    setBoard(newBoard);\n    const newTurn = turn === \"W\" ? \"B\" : \"W\";\n    setTurn(newTurn);\n    console.log(turn);\n    if (turn === \"W\") {\n      white++;\n    } else {\n      black++;\n    }\n    onDataChange(white, black);\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 602,\n    height: 602,\n    onClick: handleCanvasClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(OthelloBoard, \"NpEsXM4Eq0ywOQNRu810Vs73nzg=\");\n_c = OthelloBoard;\nexport default OthelloBoard;\nvar _c;\n$RefreshReg$(_c, \"OthelloBoard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OthelloBoard","props","_s","started","onDataChange","whiteCount","blackCount","canvasRef","board","setBoard","turn","setTurn","b","setB","gridsize","white","black","canvas","current","ctx","getContext","cw","width","ch","height","fps","paused","console","log","init","i","setInterval","draw","clearRect","fillStyle","fillRect","d1","beginPath","arc","Math","PI","fill","closePath","drawPieces","font","textAlign","fillText","x","y","handleCanvasClick","event","boundingRect","getBoundingClientRect","clientX","left","clientY","top","targetX","floor","targetY","newBoard","newTurn","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yushanlu/Desktop/Othello/othello-test/src/Canvas-test.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst OthelloBoard = (props) => {\n  const { started, onDataChange, whiteCount, blackCount } = props;\n  const canvasRef = useRef(null);\n  const [board, setBoard] = useState([]);\n  //const [started, setStarted] = useState(1); // started is the variable, 0 is what it's initialized w/\n  const [turn, setTurn] = useState(\"W\");\n  const [b, setB] = useState(2);\n  const gridsize = 75;\n  var white = whiteCount;\n  var black = blackCount;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Draw a red rectangle\n    var cw = canvas.width;\n    var ch = canvas.height;\n    var fps = 10;\n\n    var paused = 0; // 1: paused; 0: not paused\n    console.log(started);\n\n    function init() {\n      paused = 0;\n\n      for (let i = 0; i < 8; i++) {\n        board[i] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n      }\n\n      board[3][3] = \"W\";\n      board[4][3] = \"B\";\n      board[4][4] = \"W\";\n      board[3][4] = \"B\";\n\n      // Start menu code (likely to change over time!)\n    }\n\n    init();\n    setInterval(draw, 1000 / fps);\n\n    /* **************** */\n    /*      DRAW        */\n    /* **************** */\n\n    // This runs every frame and handles all rendering drawing operations.\n    function draw() {\n      // Without this, previous frames remain on the screen\n      ctx.clearRect(0, 0, cw, ch);\n\n      // Background\n      ctx.fillStyle = \"green\";\n      ctx.fillRect(0, 0, cw, ch);\n\n      ctx.fillStyle = \"black\";\n\n      // Draw the lines\n      for (var d1 = 0; d1 < 602; d1 += gridsize) {\n        ctx.fillRect(d1, 0, b, ch);\n        ctx.fillRect(0, d1, cw, b);\n      }\n\n      // Draw the 4 weird little circles around the middle 4 squares:\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n\n      ctx.arc(452 - b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n\n      ctx.beginPath();\n      ctx.arc(452 - b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      // Change the content of the piece-counters\n      //numWhiteElement.textContent = \"white:  \" + whiteCount;\n      //numBlackElement.textContent = \"black:  \" + blackCount;\n      // Draw the pieces\n      drawPieces(ctx);\n\n      if (started) {\n        ctx.fillStyle = \"#fffa\";\n        ctx.fillRect(0, 0, cw, ch);\n\n        ctx.font = \"30px arial\";\n        ctx.fillStyle = \"#000\";\n        ctx.textAlign = \"center\";\n        ctx.fillText(\n          \"Click the Connect button to start the game.\",\n          cw / 2,\n          100\n        );\n      }\n    }\n  }, [started]);\n\n  const drawPieces = (ctx) => {\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        if (board[x][y] == \"W\") {\n          ctx.beginPath();\n          ctx.arc(\n            // define the circle\n            x * gridsize + gridsize / 2,\n            y * gridsize + gridsize / 2,\n            gridsize / 2 - 4 * b, // radius\n            0, // startAngle\n            2 * Math.PI // endAngle\n          );\n          ctx.fillStyle = \"white\";\n          ctx.fill();\n          ctx.closePath();\n        } else if (board[x][y] == \"B\") {\n          ctx.beginPath();\n          ctx.arc(\n            x * gridsize + gridsize / 2,\n            y * gridsize + gridsize / 2,\n            gridsize / 2 - 4 * b,\n            0,\n            2 * Math.PI\n          );\n          ctx.fillStyle = \"black\";\n          ctx.fill();\n          ctx.closePath();\n        }\n      }\n    }\n  };\n\n  const handleCanvasClick = (event) => {\n    const canvas = canvasRef.current;\n    const boundingRect = canvas.getBoundingClientRect();\n    const x = event.clientX - boundingRect.left;\n    const y = event.clientY - boundingRect.top;\n\n    if (started === 0) return;\n\n    const targetX = Math.floor(x / gridsize);\n    const targetY = Math.floor(y / gridsize);\n\n    if (board[targetX][targetY] !== \"\") return;\n\n    const newBoard = [...board];\n    newBoard[targetX][targetY] = turn;\n    setBoard(newBoard);\n\n    const newTurn = turn === \"W\" ? \"B\" : \"W\";\n    setTurn(newTurn);\n\n    console.log(turn);\n    if (turn === \"W\") {\n      white++;\n    } else {\n      black++;\n    }\n\n    onDataChange(white, black);\n  };\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={602}\n      height={602}\n      onClick={handleCanvasClick}\n    />\n  );\n};\n\nexport default OthelloBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}