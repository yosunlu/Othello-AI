{"ast":null,"code":"var _jsxFileName = \"/Users/yushanlu/Desktop/Othello/othello-test/src/Canvas-test.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OthelloBoard = props => {\n  _s();\n  const {\n    started\n  } = props;\n  const canvasRef = useRef(null);\n  const [board, setBoard] = useState([]);\n  const [whiteCount, setWhiteCount] = useState(2);\n  const [blackCount, setBlackCount] = useState(2);\n  //const [started, setStarted] = useState(0); // started is the variable, 0 is what it's initialized w/\n  const [turn, setTurn] = useState(\"W\");\n  const gridsize = 75;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Draw a red rectangle\n    var cw = canvas.width;\n    var ch = canvas.height;\n    var b = 2; // Padding between cells\n    var fps = 50;\n    var paused = 0; // 1: paused; 0: not paused\n\n    function init() {\n      paused = 0;\n      for (let i = 0; i < 8; i++) {\n        board[i] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n      }\n      board[3][3] = \"W\";\n      board[4][3] = \"B\";\n      board[4][4] = \"W\";\n      board[3][4] = \"B\";\n      whiteCount = 2;\n      blackCount = 2;\n    }\n    init();\n    setInterval(draw, 1000 / fps);\n\n    /* **************** */\n    /*      DRAW        */\n    /* **************** */\n\n    // This runs every frame and handles all rendering drawing operations.\n    function draw() {\n      // Without this, previous frames remain on the screen\n      ctx.clearRect(0, 0, cw, ch);\n\n      // Background\n      ctx.fillStyle = \"green\";\n      ctx.fillRect(0, 0, cw, ch);\n      ctx.fillStyle = \"black\";\n\n      // Draw the lines\n      for (var d1 = 0; d1 < 602; d1 += gridsize) {\n        ctx.fillRect(d1, 0, b, ch);\n        ctx.fillRect(0, d1, cw, b);\n      }\n\n      // Draw the 4 weird little circles around the middle 4 squares:\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.arc(452 - b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.arc(452 - b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n\n      // Change the content of the piece-counters\n      //numWhiteElement.textContent = \"white:  \" + whiteCount;\n      //numBlackElement.textContent = \"black:  \" + blackCount;\n\n      // Draw the pieces\n      for (let x = 0; x < 8; x++) {\n        for (let y = 0; y < 8; y++) {\n          if (board[x][y] == \"W\") {\n            ctx.beginPath();\n            ctx.arc(\n            // define the circle\n            x * gridsize + gridsize / 2, y * gridsize + gridsize / 2, gridsize / 2 - 4 * b,\n            // radius\n            0,\n            // startAngle\n            2 * Math.PI // endAngle\n            );\n\n            ctx.fillStyle = \"white\";\n            ctx.fill();\n            ctx.closePath();\n          } else if (board[x][y] == \"B\") {\n            ctx.beginPath();\n            ctx.arc(x * gridsize + gridsize / 2, y * gridsize + gridsize / 2, gridsize / 2 - 4 * b, 0, 2 * Math.PI);\n            ctx.fillStyle = \"black\";\n            ctx.fill();\n            ctx.closePath();\n          }\n        }\n      }\n    }\n  }, [board, whiteCount, blackCount]);\n  const handleCanvasClick = event => {\n    const canvas = canvasRef.current;\n    const boundingRect = canvas.getBoundingClientRect();\n    const x = event.clientX - boundingRect.left;\n    const y = event.clientY - boundingRect.top;\n    if (started === 0) return;\n    const targetX = Math.floor(x / gridsize);\n    const targetY = Math.floor(y / gridsize);\n    console.log(board);\n    if (board[targetX][targetY] !== \"\") return;\n    const newBoard = [...board];\n    newBoard[targetX][targetY] = turn;\n    setBoard(newBoard);\n    const newTurn = turn === \"W\" ? \"B\" : \"W\";\n    setTurn(newTurn);\n    if (newTurn === \"W\") {\n      setWhiteCount(prevCount => prevCount + 1);\n    } else {\n      setBlackCount(prevCount => prevCount + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 602,\n    height: 602,\n    onClick: handleCanvasClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(OthelloBoard, \"aRfk9KstE++aJxUibGTPPmif6WQ=\");\n_c = OthelloBoard;\nexport default OthelloBoard;\nvar _c;\n$RefreshReg$(_c, \"OthelloBoard\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","OthelloBoard","props","_s","started","canvasRef","board","setBoard","whiteCount","setWhiteCount","blackCount","setBlackCount","turn","setTurn","gridsize","canvas","current","ctx","getContext","cw","width","ch","height","b","fps","paused","init","i","setInterval","draw","clearRect","fillStyle","fillRect","d1","beginPath","arc","Math","PI","fill","closePath","x","y","handleCanvasClick","event","boundingRect","getBoundingClientRect","clientX","left","clientY","top","targetX","floor","targetY","console","log","newBoard","newTurn","prevCount","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yushanlu/Desktop/Othello/othello-test/src/Canvas-test.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst OthelloBoard = (props) => {\n  const { started } = props;\n  const canvasRef = useRef(null);\n  const [board, setBoard] = useState([]);\n  const [whiteCount, setWhiteCount] = useState(2);\n  const [blackCount, setBlackCount] = useState(2);\n  //const [started, setStarted] = useState(0); // started is the variable, 0 is what it's initialized w/\n  const [turn, setTurn] = useState(\"W\");\n  const gridsize = 75;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    // Draw a red rectangle\n    var cw = canvas.width;\n    var ch = canvas.height;\n    var b = 2; // Padding between cells\n    var fps = 50;\n\n    var paused = 0; // 1: paused; 0: not paused\n\n    function init() {\n      paused = 0;\n\n      for (let i = 0; i < 8; i++) {\n        board[i] = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n      }\n\n      board[3][3] = \"W\";\n      board[4][3] = \"B\";\n      board[4][4] = \"W\";\n      board[3][4] = \"B\";\n\n      whiteCount = 2;\n      blackCount = 2;\n    }\n\n    init();\n    setInterval(draw, 1000 / fps);\n\n    /* **************** */\n    /*      DRAW        */\n    /* **************** */\n\n    // This runs every frame and handles all rendering drawing operations.\n    function draw() {\n      // Without this, previous frames remain on the screen\n      ctx.clearRect(0, 0, cw, ch);\n\n      // Background\n      ctx.fillStyle = \"green\";\n      ctx.fillRect(0, 0, cw, ch);\n\n      ctx.fillStyle = \"black\";\n\n      // Draw the lines\n      for (var d1 = 0; d1 < 602; d1 += gridsize) {\n        ctx.fillRect(d1, 0, b, ch);\n        ctx.fillRect(0, d1, cw, b);\n      }\n\n      // Draw the 4 weird little circles around the middle 4 squares:\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n\n      ctx.beginPath();\n      ctx.arc(150 + b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n      ctx.beginPath();\n\n      ctx.arc(452 - b / 2, 150 + b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n\n      ctx.beginPath();\n      ctx.arc(452 - b / 2, 452 - b / 2, 3 * b, 0, 3 * Math.PI);\n      ctx.fill();\n      ctx.closePath();\n\n      // Change the content of the piece-counters\n      //numWhiteElement.textContent = \"white:  \" + whiteCount;\n      //numBlackElement.textContent = \"black:  \" + blackCount;\n\n      // Draw the pieces\n      for (let x = 0; x < 8; x++) {\n        for (let y = 0; y < 8; y++) {\n          if (board[x][y] == \"W\") {\n            ctx.beginPath();\n            ctx.arc(\n              // define the circle\n              x * gridsize + gridsize / 2,\n              y * gridsize + gridsize / 2,\n              gridsize / 2 - 4 * b, // radius\n              0, // startAngle\n              2 * Math.PI // endAngle\n            );\n            ctx.fillStyle = \"white\";\n            ctx.fill();\n            ctx.closePath();\n          } else if (board[x][y] == \"B\") {\n            ctx.beginPath();\n            ctx.arc(\n              x * gridsize + gridsize / 2,\n              y * gridsize + gridsize / 2,\n              gridsize / 2 - 4 * b,\n              0,\n              2 * Math.PI\n            );\n            ctx.fillStyle = \"black\";\n            ctx.fill();\n            ctx.closePath();\n          }\n        }\n      }\n    }\n  }, [board, whiteCount, blackCount]);\n\n  const handleCanvasClick = (event) => {\n    const canvas = canvasRef.current;\n    const boundingRect = canvas.getBoundingClientRect();\n    const x = event.clientX - boundingRect.left;\n    const y = event.clientY - boundingRect.top;\n\n    if (started === 0) return;\n\n    const targetX = Math.floor(x / gridsize);\n    const targetY = Math.floor(y / gridsize);\n\n    console.log(board);\n    if (board[targetX][targetY] !== \"\") return;\n\n    const newBoard = [...board];\n    newBoard[targetX][targetY] = turn;\n    setBoard(newBoard);\n\n    const newTurn = turn === \"W\" ? \"B\" : \"W\";\n    setTurn(newTurn);\n\n    if (newTurn === \"W\") {\n      setWhiteCount((prevCount) => prevCount + 1);\n    } else {\n      setBlackCount((prevCount) => prevCount + 1);\n    }\n  };\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={602}\n      height={602}\n      onClick={handleCanvasClick}\n    />\n  );\n};\n\nexport default OthelloBoard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}